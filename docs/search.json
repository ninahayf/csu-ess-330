[
  {
    "objectID": "lab-02.html",
    "href": "lab-02.html",
    "title": "Lab 02: Distances and the Border Zone",
    "section": "",
    "text": "# spatial data science\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(sf)\n\nLinking to GEOS 3.13.0, GDAL 3.8.5, PROJ 9.5.1; sf_use_s2() is TRUE\n\nlibrary(units)\n\nudunits database from /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/units/share/udunits/udunits2.xml\n\n# Data\nlibrary(AOI)\n\n# Visualization\nlibrary(gghighlight)\nlibrary(ggrepel)\nlibrary(knitr)"
  },
  {
    "objectID": "lab-02.html#load-libraries",
    "href": "lab-02.html#load-libraries",
    "title": "Lab 02: Distances and the Border Zone",
    "section": "",
    "text": "# spatial data science\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(sf)\n\nLinking to GEOS 3.13.0, GDAL 3.8.5, PROJ 9.5.1; sf_use_s2() is TRUE\n\nlibrary(units)\n\nudunits database from /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/units/share/udunits/udunits2.xml\n\n# Data\nlibrary(AOI)\n\n# Visualization\nlibrary(gghighlight)\nlibrary(ggrepel)\nlibrary(knitr)"
  },
  {
    "objectID": "lab-02.html#question-1",
    "href": "lab-02.html#question-1",
    "title": "Lab 02: Distances and the Border Zone",
    "section": "Question 1",
    "text": "Question 1\n\n# 1.1 Define a Projection\neqdc &lt;- '+proj=eqdc +lat_0=40 +lon_0=-96 +lat_1=20 +lat_2=60 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs'\n\n\n# 1.2 Get USA state boundaries \nremotes::install_github(\"mikejohnson51/AOI\")\n\nUsing GitHub PAT from the git credential store.\n\n\nSkipping install of 'AOI' from a github remote, the SHA1 (f821d499) has not changed since last install.\n  Use `force = TRUE` to force installation\n\n# Get continental US states\nusa_states &lt;- aoi_get(state = \"conus\")\n\n# Transform to eqdc projection\nusa_states &lt;- st_transform(usa_states, crs = eqdc)\n\n# Preview\nggplot() + \n  geom_sf(data = usa_states, fill = \"lightblue\", color = \"white\") +\n  coord_sf(datum = NA) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n# 1.3 Get country boundaries for Mexico, the United States of America, and Canada \nna_countries &lt;- aoi_get(country = c(\"USA\", \"MX\", \"CA\"))\n\n# Transform to eqdc projection\nna_countries &lt;- st_transform(na_countries, crs = eqdc)\n\n# Optional: Plot to check\nggplot() + \n  geom_sf(data = na_countries, fill = \"wheat\", color = \"gray40\") +\n  coord_sf(datum = NA) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n# 1.4 Get City Locations from the CSV file\n# Load cities CSV\ncities_raw &lt;- read_csv(\"uscities.csv\")\n\nRows: 31254 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (9): city, city_ascii, state_id, state_name, county_fips, county_name, s...\ndbl (6): lat, lng, population, density, ranking, id\nlgl (2): military, incorporated\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Convert to spatial (initial CRS = NAD83)\ncities_sf &lt;- st_as_sf(cities_raw, \n                      coords = c(\"lng\", \"lat\"), \n                      crs = 4269)  # NAD83\n\n# Reproject to eqdc\ncities_sf &lt;- st_transform(cities_sf, crs = eqdc)\n\n# Optional: Remove non-CONUS cities using state filter (e.g., only use cities in usa_states)\ncities_sf &lt;- cities_sf %&gt;% \n  st_join(usa_states, join = st_within) %&gt;% \n  filter(!is.na(name))  # Remove cities that didn’t match a state polygon\n\n# Plot to check\nggplot() +\n  geom_sf(data = usa_states, fill = \"white\") +\n  geom_sf(data = cities_sf, color = \"red\", size = 0.5) +\n  theme_minimal()"
  },
  {
    "objectID": "lab-02.html#question-2",
    "href": "lab-02.html#question-2",
    "title": "Lab 02: Distances and the Border Zone",
    "section": "Question 2",
    "text": "Question 2\n\n# 2.1 Distance to USA Border (coastline or national)(km)\n# Combine all state boundaries into one geometry and resolve shared boundaries\nusa_border &lt;- usa_states %&gt;%\n  st_union() %&gt;% \n  st_cast(\"MULTILINESTRING\")\n\n# Compute distance of each city to USA national border\ncities_sf &lt;- cities_sf %&gt;%\n  mutate(dist_to_usa_border_km = st_distance(geometry, usa_border) %&gt;% \n           set_units(\"km\") %&gt;% \n           drop_units())\n\nlibrary(flextable)\n\n\nAttaching package: 'flextable'\n\n\nThe following object is masked from 'package:purrr':\n\n    compose\n\ncities_sf %&gt;% \n  select(city, state_id, dist_to_usa_border_km) %&gt;%\n  arrange(desc(dist_to_usa_border_km)) %&gt;%\n  slice(1:5) %&gt;%\n  flextable()\n\ncitystate_iddist_to_usa_border_kmgeometryMinneapolisKS1,084.275[[XY]]AdaKS1,084.112[[XY]]BarnardKS1,083.737[[XY]]ManchesterKS1,080.210[[XY]]TalmageKS1,080.049[[XY]]\n\n\n\n# 2.2 Distance to States (km)\n# Preserve internal state boundaries\nstate_borders &lt;- usa_states %&gt;%\n  st_combine() %&gt;%\n  st_cast(\"MULTILINESTRING\")\n\ncities_sf &lt;- cities_sf %&gt;%\n  mutate(dist_to_state_border_km = st_distance(geometry, state_borders) %&gt;% \n           set_units(\"km\") %&gt;%\n           drop_units())\n\ncities_sf %&gt;%\n  select(city, state_id, dist_to_state_border_km) %&gt;%\n  arrange(desc(dist_to_state_border_km)) %&gt;%\n  slice(1:5) %&gt;%\n  flextable()\n\ncitystate_iddist_to_state_border_kmgeometryBriggsTX314.7901[[XY]]LampasasTX308.9002[[XY]]FlorenceTX304.0898[[XY]]SaladoTX302.8041[[XY]]KempnerTX302.5260[[XY]]\n\n\n\n# 2.3 Distance to Mexico (km)\n# 2.3 Distance to Mexico (km)\nmexico_border &lt;- na_countries %&gt;%\n  filter(admin == \"Mexico\") %&gt;%\n  st_union() %&gt;%\n  st_cast(\"MULTILINESTRING\")\n\n# Calculate distance from each city to Mexico\ncities_sf &lt;- cities_sf %&gt;%\n  mutate(dist_to_mexico = st_distance(cities_sf, mexico_border),\n         dist_to_mexico = set_units(dist_to_mexico, \"km\"),\n         dist_to_mexico = drop_units(dist_to_mexico))\n\n# Display 5 cities farthest from Mexico\nlibrary(flextable)\n\ncities_sf %&gt;%\n  st_drop_geometry() %&gt;%\n  select(city, state_name.x, dist_to_mexico) %&gt;%\n  slice_max(dist_to_mexico, n = 5) %&gt;%\n  flextable()\n\ncitystate_name.xdist_to_mexicoGrand IsleMaine3,282.825CaribouMaine3,250.330Presque IsleMaine3,234.570OakfieldMaine3,175.577Island FallsMaine3,162.285\n\n\n\n# 2.4 Distance to Canada (km)\ncanada_border &lt;- na_countries %&gt;%\n  filter(admin == \"Canada\") %&gt;%\n  st_union() %&gt;%\n  st_cast(\"MULTILINESTRING\")\n\ncities_sf &lt;- cities_sf %&gt;%\n  mutate(dist_to_canada_km = st_distance(geometry, canada_border) %&gt;%\n           set_units(\"km\") %&gt;%\n           drop_units())\n\ncities_sf %&gt;%\n  select(city, state_name.x, dist_to_canada_km) %&gt;%\n  arrange(desc(dist_to_canada_km)) %&gt;%\n  slice(1:5) %&gt;%\n  flextable()\n\ncitystate_name.xdist_to_canada_kmgeometryGuadalupe GuerraTexas2,206.455[[XY]]SandovalTexas2,205.641[[XY]]FrontonTexas2,204.794[[XY]]Fronton RanchettesTexas2,202.118[[XY]]EvergreenTexas2,202.020[[XY]]"
  },
  {
    "objectID": "lab-02.html#question-3",
    "href": "lab-02.html#question-3",
    "title": "Lab 02: Distances and the Border Zone",
    "section": "Question 3",
    "text": "Question 3\n\n# 3.1 Data \nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(gghighlight)\nlibrary(dplyr)\nlibrary(sf)\n\n# Example of getting world map data\nworld &lt;- st_read(system.file(\"shape/nc.shp\", package=\"sf\"))\n\nReading layer `nc' from data source \n  `/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/sf/shape/nc.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 100 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\n\n# Create a map with continents, CONUS outline, state boundaries, and 10 largest cities\nggplot() + \n  # Plot CONUS outline\n  geom_sf(data = usa_border, fill = \"lightgray\", color = \"black\", lty = 1) +\n  # Plot state boundaries\n  geom_sf(data = state_borders, fill = NA, color = \"black\", size = 0.5) +\n  # Highlight and label the 10 largest cities\n  geom_sf(data = cities_sf %&gt;% slice_max(population, n = 10), aes(color = \"red\"), size = 2) +\n  ggrepel::geom_label_repel(\n    data = cities_sf %&gt;% slice_max(population, n = 10),\n    aes(label = city, geometry = geometry),\n    stat = \"sf_coordinates\",\n    size = 3) +\n  # Plot continents if you have them\n  geom_sf(data = world, fill = NA, color = \"black\", lty = 2) + \n  labs(title = \"USA: 10 Largest Cities with State Boundaries and Continents\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n# 3.2 City Distance from the Border \n# Calculate the distance from each city to the national border\ncities_sf$dist_to_border &lt;- st_distance(cities_sf, usa_border) %&gt;%\n  set_units(\"km\") %&gt;%\n  drop_units()  # Remove units for ease of plotting\n\nggplot() +\n  # Plot USA border and state boundaries\n  geom_sf(data = usa_border, fill = \"lightgray\", color = \"black\", lty = 1) +\n  geom_sf(data = state_borders, fill = NA, color = \"black\", size = 0.5) +\n  # Color cities by distance from national border\n  geom_sf(data = cities_sf, aes(color = dist_to_border), size = 2) +\n  scale_color_viridis_c(option = \"D\") +  # Color scale for distance\n  # Highlight the 5 cities farthest from the border\n  gghighlight(dist_to_border &gt; 2000, label_key = city) +  # Remove quotes around \"city\"\n  # Add labels for the 5 farthest cities\n  ggrepel::geom_label_repel(\n    data = cities_sf %&gt;% slice_max(dist_to_border, n = 5),\n    aes(label = city, geometry = geometry),\n    stat = \"sf_coordinates\",\n    size = 3) +\n  labs(title = \"Cities by Distance to National Border\") +\n  theme_minimal()\n\nWarning: Using one column matrices in `filter()` was deprecated in dplyr 1.1.0.\nℹ Please use one dimensional logical vectors instead.\nℹ The deprecated feature was likely used in the gghighlight package.\n  Please report the issue at\n  &lt;https://github.com/yutannihilation/gghighlight/issues&gt;.\n\n\nWarning: Could not calculate the predicate for layer 1, layer 2; ignored\n\n\n\n\n\n\n\n\n\n\n# 3.3 City Distance from Nearest State \n# Calculate the distance from each city to the nearest state border\ncities_sf$dist_to_state &lt;- st_distance(cities_sf, state_borders) %&gt;%\n  apply(1, min) %&gt;%\n  set_units(\"km\") %&gt;%\n  drop_units()  # Remove units for ease of plotting\n\n# Now plot the cities based on the distance to the nearest state border\nggplot() +\n  # Plot USA border and state boundaries\n  geom_sf(data = usa_border, fill = \"lightgray\", color = \"black\", lty = 1) +\n  geom_sf(data = state_borders, fill = NA, color = \"black\", size = 0.5) +\n  # Color cities by distance to the nearest state border\n  geom_sf(data = cities_sf, aes(color = dist_to_state), size = 2) +\n  scale_color_viridis_c(option = \"A\") +  # Color scale for distance\n  # Highlight the 5 cities farthest from the state border\n  gghighlight(dist_to_state &gt; 500, label_key = city) +\n  # Add labels for the 5 farthest cities\n  ggrepel::geom_label_repel(\n    data = cities_sf %&gt;% slice_max(dist_to_state, n = 5),\n    aes(label = city, geometry = geometry),\n    stat = \"sf_coordinates\",\n    size = 3) +\n  labs(title = \"Cities by Distance to Nearest State Border\") +\n  theme_minimal()\n\nWarning: Could not calculate the predicate for layer 1, layer 2; ignored\n\n\n\n\n\n\n\n\n\n\n# 3.4 Equidistance boundary from Mexico and Canada\n# Create a new variable for the absolute difference between the distances to Mexico and Canada\ncities_sf &lt;- cities_sf %&gt;%\n  mutate(abs_diff = abs(dist_to_mexico - dist_to_canada_km))\n\nggplot() +\n  # Plot USA border and state boundaries\n  geom_sf(data = usa_border, fill = \"lightgray\", color = \"black\", lty = 1) +\n  geom_sf(data = state_borders, fill = NA, color = \"black\", size = 0.5) +\n  # Color cities by the absolute difference in distances\n  geom_sf(data = cities_sf, aes(color = abs_diff), size = 2) +\n  scale_color_viridis_c(option = \"C\") +  # Color scale for the difference\n  # Highlight the cities that are equidistant from both borders (100 km)\n  gghighlight(abs_diff &lt; 100, label_key = city) +\n  # Add labels for the 5 most populous cities in this zone\n  ggrepel::geom_label_repel(\n    data = cities_sf %&gt;% filter(abs_diff &lt; 100) %&gt;% slice_max(population, n = 5),\n    aes(label = city, geometry = geometry),\n    stat = \"sf_coordinates\",\n    size = 3) +\n  labs(title = \"Cities Equidistant from Mexico and Canada (100 km)\") +\n  theme_minimal()\n\nWarning: Could not calculate the predicate for layer 1, layer 2; ignored"
  },
  {
    "objectID": "lab-02.html#question-4",
    "href": "lab-02.html#question-4",
    "title": "Lab 02: Distances and the Border Zone",
    "section": "Question 4",
    "text": "Question 4\n\n# 4.1 Quantifying Border Zone\n# Define 100 miles in kilometers\nborder_buffer_km &lt;- 160\n\n# Calculate the distance from each city to the border (you may already have this)\ncities_sf$dist_to_border &lt;- st_distance(cities_sf, usa_border) %&gt;%\n  set_units(\"km\") %&gt;%\n  drop_units()\n\n# Filter cities within 100 miles of the border\nborder_zone &lt;- cities_sf %&gt;% filter(dist_to_border &lt;= border_buffer_km)\n\n# Summarize counts\nn_cities &lt;- nrow(border_zone)\ntotal_pop &lt;- sum(border_zone$population, na.rm = TRUE)\ntotal_pop_all &lt;- sum(cities_sf$population, na.rm = TRUE)\npercent_pop &lt;- (total_pop / total_pop_all) * 100\n\n# Report as a table\nborder_zone_summary &lt;- tibble(\n  `# of Cities` = n_cities,\n  `Population in Zone` = total_pop,\n  `Total Population` = total_pop_all,\n  `Percent in Zone` = percent_pop\n)\n\nborder_zone_summary\n\n# A tibble: 1 × 4\n  `# of Cities` `Population in Zone` `Total Population` `Percent in Zone`\n          &lt;int&gt;                &lt;dbl&gt;              &lt;dbl&gt;             &lt;dbl&gt;\n1          9813            216043045          396228558              54.5\n\n\nACLU’s article said about 2/3 of U.S. Cities fall within this zone but my data suggests about 54% of U.S. Cities fall within this zone.\n\n# 4.2 Mapping Border Zone \nggplot() +\n  geom_sf(data = usa_border, fill = \"lightgray\", color = \"black\") +\n  geom_sf(data = state_borders, fill = NA, color = \"black\", size = 0.3) +\n  # Color all cities by population with those in the border zone highlighted\n  geom_sf(data = cities_sf, aes(color = population), size = 1, alpha = 0.3) +\n  gghighlight(dist_to_border &lt;= 160, use_direct_label = FALSE, unhighlighted_params = list(alpha = 0.1)) +\n  scale_color_gradient(low = \"orange\", high = \"darkred\") +\n  # Label the 10 most populous cities in the zone\n  ggrepel::geom_label_repel(\n    data = border_zone %&gt;% slice_max(population, n = 10),\n    aes(label = city, geometry = geometry),\n    stat = \"sf_coordinates\",\n    size = 3, color = \"black\") +\n  labs(title = \"Most Populous Cities Within 100-Mile Border Zone\",\n       color = \"Population\") +\n  theme_minimal()\n\nWarning: Could not calculate the predicate for layer 1, layer 2; ignored\n\n\n\n\n\n\n\n\n\n\n# 4.3 Instead of labeling the 10 most populous cities, label the most populous city in each state within the Danger Zone.\n\n# Get most populous city per state in the border zone\nmost_pop_per_state &lt;- border_zone %&gt;%\n  group_by(state_name.x) %&gt;%\n  slice_max(order_by = population, n = 1) %&gt;%\n  ungroup()\n\nggplot() +\n  geom_sf(data = usa_border, fill = \"lightgray\", color = \"black\") +\n  geom_sf(data = state_borders, fill = NA, color = \"black\", size = 0.3) +\n  geom_sf(data = cities_sf, aes(color = population), size = 1, alpha = 0.3) +\n  gghighlight(dist_to_border &lt;= 160, use_direct_label = FALSE, unhighlighted_params = list(alpha = 0.1)) +\n  scale_color_gradient(low = \"orange\", high = \"darkred\") +\n  ggrepel::geom_label_repel(\n    data = most_pop_per_state,\n    aes(label = city, geometry = geometry),\n    stat = \"sf_coordinates\",\n    size = 3, color = \"black\") +\n  labs(title = \"Most Populous City in Each State Within 100-Mile Border Zone\",\n       color = \"Population\") +\n  theme_minimal()\n\nWarning: Could not calculate the predicate for layer 1, layer 2; ignored\n\n\nWarning: ggrepel: 5 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  }
]